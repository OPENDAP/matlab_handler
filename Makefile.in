
# $Id: Makefile.in,v 1.14 1999/03/29 19:22:03 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplid by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

PROG = mat_das mat_dds mat_dods
DODS_ROOT = ../..

WWW_ROOT=@WWW_ROOT@
MATLAB_ROOT=@MATLAB_ROOT@
OS=@OS@

INCS = -I$(DODS_ROOT)/include -I$(MATLAB_ROOT)/extern/include @INCS@
DEFS = -DUSE_LIBGXX_INLINES -DLOCAL @DEFS@ 
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CFLAGS = @CFLAGS@ $(SWAP) $(NETLONG) 
CXXFLAGS = @CXXFLAGS@ -fno-rtti

# Make sure that the core software libraries just built can be found without
# first running make install, but that if `make install' and `make clean' has
# been run those libraries will be found in the `lib' directory.
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib 

LFLAGS=-8
YFLAGS=-d

LIBS = -ldap++ @MATLIBS@ -lm @LIBS@

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
version = @VERSION@
dir = math-dods-@VERSION@

# testsuite specifics
RUNTEST= runtest
RUNTESTFLAGS= #--all --verbose

# names of key programs

LN_S = @LN_S@
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
TYPEAR = ar
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
TAGS = etags
STRIP = strip

MATSRC = MATArray.cc MATByte.cc MATFloat64.cc MATFunction.cc MATGrid.cc \
	 MATInt32.cc MATList.cc MATSequence.cc MATStr.cc MATStructure.cc \
	 MATUrl.cc MATUInt32.cc MATInt16.cc MATUInt16.cc MATFloat32.cc

MATOBJ = MATArray.o MATByte.o MATFloat64.o MATFunction.o MATGrid.o MATInt32.o \
	 MATList.o MATSequence.o MATStr.o MATStructure.o MATUrl.o MATUInt32.o \
	 MATInt16.o MATUInt16.o MATFloat32.o

SSRCS = mat_das.cc mat_dds.cc mat_dods.cc $(MATSRC)
DASOBJS = mat_das.o  MatLabUtil.o $(MATOBJ)
DDSOBJS = mat_dds.o MatLabUtil.o $(MATOBJ)
SRVOBJS = mat_dods.o  MatLabUtil.o $(MATOBJ)

XDRFILE	= @XDRFILE@

.PHONY:	programs
all: mat_das mat_dds mat_dods 

mat_das:$(DASOBJS) 
	$(CXX) $(LDFLAGS) -o mat_das $(DASOBJS) $(LIBS)	

mat_dds:$(DDSOBJS) 
	$(CXX) $(LDFLAGS) -o mat_dds $(DDSOBJS)  $(LIBS)

mat_dods:$(SRVOBJS) 
	$(CXX) $(LDFLAGS) -o mat_dods $(SRVOBJS) $(LIBS)

# Standard targets with some customization for das-test and dds-test

Makefile: ${srcdir}/Makefile.in
	${SHELL} config.status

check:
	echo "No tests"

install: all
	$(INSTALL_PROGRAM) -s mat_das $(etcdir)
	$(INSTALL_PROGRAM) -s mat_dds $(etcdir)
	$(INSTALL_PROGRAM) -s mat_dods $(etcdir)
	$(INSTALL_PROGRAM) nph-mat $(etcdir)

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG) 

distclean:
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG) 
	-rm -f config.status config.log config.cache
	-rm -f site.exp

# This is a special tar target because it builds not only the tar file for
# the core software but also the lib, etc, and bin directories. It assumes
# that the root directory for DODS is called `DODS' (no version number).
.PHONY: tar
tar:
	-rm -r config.cache config.log config.status
	cd $(DODS_ROOT)/.. && \
	tar --exclude '*/old' --exclude '*/.#*' --exclude '*/CVS' \
	    --gzip --create --dereference --file DODS-$(dir).tar.gz \
	    DODS/src/$(dir)

.PHONY: update-version
update-version: check-version
	@echo "Version is: `cat version.h`"
	if [ ! -d ../$(dir) ]; then \
	    mv ../math-dods* ../$(dir);\
	fi

# Compare the version encoded in this Makefile (set by configure) with the
# version in version.h. The version make variable is set up near the top of
# the Makefile.
.PHONY: check-version
check-version:
	@echo "Checking for version.h and Makefile version match-up"
	@if [ "$(version)" != "`cat version.h`" ]; \
	then \
		echo "You must manually re-run configure!"; \
		exit 1; \
	else \
		echo "Yes, they match."; \
	fi

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.lex *.y

depend: 
	@depend@ -- $(INCS) -I/usr/local/lib/g++-include -- $(SSRCS) $(CSRCS)


.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

# DO NOT DELETE THIS LINE -- make depend depends on it.
